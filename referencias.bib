@InProceedings{reflection,
author="Boutin, Samuel",
editor="Abadi, Mart{\'i}n
and Ito, Takayasu",
title="Using reflection to build efficient and certified decision procedures",
booktitle="Theoretical Aspects of Computer Software",
year="1997",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="515--529",
abstract="In this paper we explain how computational reflection can help build efficient certified decision procedure in reduction systems. We have developed a decision procedure on abelian rings in the Coq system but the approach we describe applies to all reduction systems that allow the definition of concrete types (or datatypes). We show that computational reflection is more efficient than an LCF-like approach to implement decision procedures in a reduction system. We discuss the concept of total reflection, which we have investigated in Coq using two facts: the extraction process available in Coq and the fact that the implementation language of the Coq system can be considered as a sublanguage of Coq. Total reflection is not yet implemented in Coq but we can test its performance as the extraction process is effective. Both reflection and total reflection are conservative extensions of the reduction system in which they are used. We also discuss performance and related approaches. In the paper,we assume basic knowledges of ML and proof-checkers.",
isbn="978-3-540-69530-1"
}

@string{cade   = "Proc. Conference on Automated Deduction (CADE)"}
@string{cav    = "Computer Aided Verification (CAV)"}
@string{ijcar1  = "International Joint Conference on Automated Reasoning
                 (IJCAR), Part I"}
@string{ijcar2  = "International Joint Conference on Automated Reasoning
                 (IJCAR), Part II"}
@string{ijcar  = "International Joint Conference on Automated Reasoning
                 (IJCAR)"}

@string{lncs   = "Lecture Notes in Computer Science"}

@TECHREPORT{smtlib,
  author = {Clark Barrett and Pascal Fontaine and Cesare Tinelli},
  title = {{The SMT-LIB Standard: Version 2.6}},
  institution = {Department of Computer Science, The University of Iowa},
  year = 2017,
  note = {Available at {www.SMT-LIB.org}}
}

@InProceedings{cvc5,
  author    = "Barbosa, Haniel
  and others",
  editor    = "Fisman, Dana
  and Rosu, Grigore",
  title     = "cvc5: A Versatile and Industrial-Strength SMT Solver",
  booktitle = "Tools and Algorithms for the Construction and Analysis of Systems",
  year      = "2022",
  publisher = "Springer International Publishing",
  address   = "Cham",
  pages     = "415--442",
  isbn      = "978-3-030-99524-9"
}

@article{hammering,
title   = {Hammering towards QED},
year    = {2016},
month   = {Jan.},
volume  = {9},
url     = {https://jfr.unibo.it/article/view/4593},
DOI     = {10.6092/issn.1972-5787/4593},
number  = {1},
journal = {Journal of Formalized Reasoning},
author  = {Blanchette, Jasmin C. and Kaliszyk, Cezary and Paulson, Lawrence C. and Urban, Josef},
pages   = {101-148}
}

@InProceedings{smtcoq,
author    = "Ekici, Burak
and Mebsout, Alain
and Tinelli, Cesare
and Keller, Chantal
and Katz, Guy
and Reynolds, Andrew
and Barrett, Clark",
editor    = "Majumdar, Rupak
and Kun{\v{c}}ak, Viktor",
title     = "SMTCoq: A Plug-In for Integrating SMT Solvers into Coq",
booktitle = "Computer Aided Verification",
year      = "2017",
publisher = "Springer International Publishing",
address   = "Cham",
pages     = "126--133",
isbn      = "978-3-319-63390-9"
}

@InProceedings{sledgehammer,
author    = "Blanchette, Jasmin Christian
and B{\"o}hme, Sascha
and Paulson, Lawrence C.",
editor    = "Bj{\o}rner, Nikolaj
and Sofronie-Stokkermans, Viorica",
title     = "Extending Sledgehammer with SMT Solvers",
booktitle = "Automated Deduction -- CADE-23",
year      = "2011",
publisher = "Springer Berlin Heidelberg",
address   = "Berlin, Heidelberg",
pages     = "116--130",
isbn      = "978-3-642-22438-6"
}

@article{scholze,
author  = {Castelvecchi, Davide},
year    = {2021},
month   = {06},
pages   = {},
title   = {Mathematicians welcome computer-assisted proof in ``grand unification'' theory},
volume  = {595},
journal = {Nature},
doi     = {10.1038/d41586-021-01627-2}
}

@InProceedings{lean,
author="de Moura, Leonardo
and Kong, Soonho
and Avigad, Jeremy
and van Doorn, Floris
and von Raumer, Jakob",
editor="Felty, Amy P.
and Middeldorp, Aart",
title="The Lean Theorem Prover (System Description)",
booktitle="Automated Deduction - CADE-25",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="378--388",
isbn="978-3-319-21401-6"
}

@incollection{Barrett2018,
  author    = {Clark W. Barrett and
               Cesare Tinelli},
  title     = {Satisfiability Modulo Theories},
  booktitle = {Handbook of Model Checking.},
  pages     = {305--343},
  year      = {2018},
  url       = {https://doi.org/10.1007/978-3-319-10575-8\_11},
  doi       = {10.1007/978-3-319-10575-8\_11},
  timestamp = {Mon, 24 Jun 2019 15:54:17 +0200},
  biburl    = {https://dblp.org/rec/bib/reference/mc/BarrettT18},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  editor    = {Edmund M. Clarke and
               Thomas A. Henzinger and
               Helmut Veith and
               Roderick Bloem},
  publisher = {Springer},
}

@book{Bertot2004,
  author    = {Yves Bertot and
               Pierre Cast{\'{e}}ran},
  title     = {Interactive Theorem Proving and Program Development - Coq'Art: The
               Calculus of Inductive Constructions},
  series    = {Texts in Theoretical Computer Science. An {EATCS} Series},
  publisher = {Springer},
  year      = {2004},
  doi       = {10.1007/978-3-662-07964-5},
  isbn      = {978-3-642-05880-6},
  timestamp = {Tue, 16 May 2017 14:24:38 +0200},
  biburl    = {https://dblp.org/rec/series/txtcs/BertotC04.bib},
}

@MISC {metaLean,
TITLE = {A Lean 4 Metaprogramming Book},
AUTHOR = {Arthur Paulino and Damiano Testa and Edward Ayers and Evgenia Karunus and Henrik B{\"o}ving and Jannis Limperg and Siddhartha Gadgil and Siddharth Bhat},
HOWPUBLISHED = {GitHub},
NOTE = {URL: \url{https://github.com/leanprover-community/lean4-metaprogramming-book} (visited on 2023-08-23)},
}


@inproceedings{Bouton2009,
  author    = {Thomas Bouton and
               Diego Caminha B. de Oliveira and
               David D{\'{e}}harbe and
               Pascal Fontaine},
  title     = {{veriT}: {A}n {O}pen, {T}rustable and {E}fficient {SMT-S}olver},
  booktitle = cade,
  pages     = {151--156},
  year      = {2009},
  url       = {http://dx.doi.org/10.1007/978-3-642-02959-2_12},
  doi       = {10.1007/978-3-642-02959-2_12},
  editor    = {Renate A. Schmidt},
  series    = lncs,
  volume    = {5663},
  publisher = {Springer},
}

@inproceedings{Barrett2011,
author="Barrett, Clark
and Conway, Christopher L.
and Deters, Morgan
and Hadarean, Liana
and Jovanovi{\'{c}}, Dejan
and King, Tim
and Reynolds, Andrew
and Tinelli, Cesare",
editor="Gopalakrishnan, Ganesh
and Qadeer, Shaz",
title={{CVC4}},
booktitle=cav,
year="2011",
publisher="Springer",
pages="171--177",
doi="10.1007/978-3-642-22110-1_14",
url="http://dx.doi.org/10.1007/978-3-642-22110-1_14"
}

@book{Nipkow2002,
  author    = {Tobias Nipkow and
               Lawrence C. Paulson and
               Markus Wenzel},
  title     = {Isabelle/HOL: {A} Proof Assistant for Higher-Order Logic},
  series    = {LNCS},
  volume    = {2283},
  publisher = {Springer},
  year      = {2002}
}

@inproceedings{Barbosa2022,
  author    = {Haniel Barbosa and Andrew Reynolds and Gereon Kremer and Hanna
                                Lachnitt and Aina Niemetz and Andres Notzli and Alex
                                Ozdemir and Mathias Preiner and Arjun Viswanathan and Scott
                                Viteri and Yoni Zohar and Cesare Tinelli and Clark Barrett},
  editor    = {Jasmin Blanchette and Laura Kovacs and Dirk Pattinson},
  title     = {Flexible Proof Production in an Industrial-Strength SMT Solver},
  booktitle = ijcar,
  series    = lncs,
  publisher = {Springer},
  year      = {2022},
}


@inproceedings{mathlib,
author    = {The mathlib Community},
title     = {The Lean Mathematical Library},
year      = {2020},
isbn      = {9781450370974},
publisher = {Association for Computing Machinery},
address   = {New York, NY, USA},
doi       = {10.1145/3372885.3373824},
booktitle = {Proceedings of the 9th ACM SIGPLAN International Conference on Certified Programs and Proofs},
pages     = {367-381},
numpages  = {15},
keywords  = {formal proof, formal library, mathlib, Lean},
location  = {New Orleans, LA, USA},
series    = {CPP 2020}
}

@article{snipe,
  doi = {10.4204/eptcs.336.3},

  url = {https://doi.org/10.4204%2Feptcs.336.3},

  year = 2021,
  month = {jul},

  publisher = {Open Publishing Association},

  volume = {336},

  pages = {24--39},

  author = {Valentin Blot and Louise Dubois de Prisque and Chantal Keller and Pierre Vial},

  title = {General Automation in Coq through Modular Transformations},

  journal = {Electronic Proceedings in Theoretical Computer Science}
}

@InProceedings{proof_production,
author="Barbosa, Haniel
and Reynolds, Andrew
and Kremer, Gereon
and Lachnitt, Hanna
and Niemetz, Aina
and N{\"o}tzli, Andres
and Ozdemir, Alex
and Preiner, Mathias
and Viswanathan, Arjun
and Viteri, Scott
and Zohar, Yoni
and Tinelli, Cesare
and Barrett, Clark",
editor="Blanchette, Jasmin
and Kov{\'a}cs, Laura
and Pattinson, Dirk",
title="Flexible Proof Production in an Industrial-Strength SMT Solver",
booktitle="Automated Reasoning",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="15--35",
abstract="Proof production for SMT solvers is paramount to ensure their correctness independently from implementations, which are often prohibitively difficult to verify. Historically, however, SMT proof production has struggled with performance and coverage issues, resulting in the disabling of many crucial solving techniques and in coarse-grained (and thus hard to check) proofs. We present a flexible proof-production architecture designed to handle the complexity of versatile, industrial-strength SMT solvers and show how we leverage it to produce detailed proofs, including for components previously unsupported by any solver. The architecture allows proofs to be produced modularly, lazily, and with numerous safeguards for correctness. This architecture has been implemented in the state-of-the-art SMT solver cvc5. We evaluate its proofs for SMT-LIB benchmarks and show that the new architecture produces better coverage than previous approaches, has acceptable performance overhead, and supports detailed proofs for most solving components.",
isbn="978-3-031-10769-6"
}

@book{smt,
  title={Satisfiability modulo theories},
  author={Barrett, Clark and Tinelli, Cesare},
  year={2018},
  publisher={Springer}
}

@book{many_sorted,
author = {Manzano, Mar\'{\i}a},
title = {Extensions of First Order Logic},
year = {1996},
isbn = {0521354358},
publisher = {Cambridge University Press},
address = {USA}
}

@inproceedings{f_star,
author = {Swamy, Nikhil and Kohlweiss, Markulf and Zinzindohoue, Jean-Karim and Zanella-Béguelin, Santiago and Hriţcu, Cătălin and Keller, Chantal and Rastogi, Aseem and Delignat-Lavaud, Antoine and Forest, Simon and Bhargavan, Karthikeyan and Fournet, Cedric and Strub, Pierre-Yves},
year = {2016},
month = {04},
pages = {256-270},
title = {Dependent types and multi-monadic effects in F*},
volume = {51},
doi = {10.1145/2837614.2837655}
}

@book{hacker_delight,
author = {Warren, Henry S.},
title = {Hacker's Delight},
year = {2012},
isbn = {0321842685},
publisher = {Addison-Wesley Professional},
edition = {2nd},
abstract = {In Hackers Delight, Second Edition, Hank Warren once again compiles an irresistible collection of programming hacks: timesaving techniques, algorithms, and tricks that help programmers build more elegant and efficient software, while also gaining deeper insights into their craft. Warrens hacks are eminently practical, but theyre also intrinsically interesting, and sometimes unexpected, much like the solution to a great puzzle. They are, in a word, a delight to any programmer who is excited by the opportunity to improve. Extensive additions in this edition include A new chapter on cyclic redundancy checking (CRC), including routines for the commonly used CRC-32 code A new chapter on error correcting codes (ECC), including routines for the Hamming code More coverage of integer division by constants, including methods using only shifts and adds Computing remainders without computing a quotient More coverage of population count and counting leading zeros Array population count New algorithms for compress and expand An LRU algorithm Floating-point to/from integer conversions Approximate floating-point reciprocal square root routine A gallery of graphs of discrete functions Now with exercises and answers}
}

@article{fol_undec,
title   = {Explaining the Undecidability of First-Order Logic},
year    = {2021},
url     = {https://www2.cms.hu-berlin.de/newlogic/webMathematica/Logic/undecidability_phil_publication.pdf},
DOI     = {10.3390/1010000},
author  = {Timm Lampert , Anderson Nakano},
}

@article{dpll,
  added-at = {2018-11-14T00:00:00.000+0100},
  author = {Davis, Martin and Logemann, George and Loveland, Donald W.},
  biburl = {https://www.bibsonomy.org/bibtex/21e6b728082099ec977be22c016044a96/dblp},
  ee = {https://www.wikidata.org/entity/Q29399031},
  interhash = {3bd66f91ac6979878bfe4d18531db081},
  intrahash = {1e6b728082099ec977be22c016044a96},
  journal = {Commun. ACM},
  keywords = {dblp},
  number = 7,
  pages = {394-397},
  timestamp = {2018-11-15T12:17:19.000+0100},
  title = {A machine program for theorem-proving.},
  url = {http://dblp.uni-trier.de/db/journals/cacm/cacm5.html#DavisLL62},
  volume = 5,
  year = 1962
}

@article{cdcl,
author = {Davis, Martin and Putnam, Hilary},
title = {A Computing Procedure for Quantification Theory},
year = {1960},
issue_date = {July 1960},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {3},
issn = {0004-5411},
url = {https://doi.org/10.1145/321033.321034},
doi = {10.1145/321033.321034},
abstract = {The hope that mathematical methods employed in the investigation of formal logic would lead to purely computational methods for obtaining mathematical theorems goes back to Leibniz and has been revived by Peano around the turn of the century and by Hilbert's school in the 1920's. Hilbert, noting that all of classical mathematics could be formalized within quantification theory, declared that the problem of finding an algorithm for determining whether or not a given formula of quantification theory is valid was the central problem of mathematical logic. And indeed, at one time it seemed as if investigations of this “decision” problem were on the verge of success. However, it was shown by Church and by Turing that such an algorithm can not exist. This result led to considerable pessimism regarding the possibility of using modern digital computers in deciding significant mathematical questions. However, recently there has been a revival of interest in the whole question. Specifically, it has been realized that while no decision procedure exists for quantification theory there are many proof procedures available—that is, uniform procedures which will ultimately locate a proof for any formula of quantification theory which is valid but which will usually involve seeking “forever” in the case of a formula which is not valid—and that some of these proof procedures could well turn out to be feasible for use with modern computing machinery.Hao Wang [9] and P. C. Gilmore [3] have each produced working programs which employ proof procedures in quantification theory. Gilmore's program employs a form of a basic theorem of mathematical logic due to Herbrand, and Wang's makes use of a formulation of quantification theory related to those studied by Gentzen. However, both programs encounter decisive difficulties with any but the simplest formulas of quantification theory, in connection with methods of doing propositional calculus. Wang's program, because of its use of Gentzen-like methods, involves exponentiation on the total number of truth-functional connectives, whereas Gilmore's program, using normal forms, involves exponentiation on the number of clauses present. Both methods are superior in many cases to truth table methods which involve exponentiation on the total number of variables present, and represent important initial contributions, but both run into difficulty with some fairly simple examples.In the present paper, a uniform proof procedure for quantification theory is given which is feasible for use with some rather complicated formulas and which does not ordinarily lead to exponentiation. The superiority of the present procedure over those previously available is indicated in part by the fact that a formula on which Gilmore's routine for the IBM 704 causes the machine to computer for 21 minutes without obtaining a result was worked successfully by hand computation using the present method in 30 minutes. Cf. §6, below.It should be mentioned that, before it can be hoped to employ proof procedures for quantification theory in obtaining proofs of theorems belonging to “genuine” mathematics, finite axiomatizations, which are “short,” must be obtained for various branches of mathematics. This last question will not be pursued further here; cf., however, Davis and Putnam [2], where one solution to this problem is given for ele},
journal = {J. ACM},
month = {jul},
pages = {201–215},
numpages = {15}
}

@article{ack_cong, title={W. Ackermann. Solvable cases of the decision problem. Studies in logic and the foundations of mathematics. North-Holland Publishing Company, Amsterdam1954, VIII   114 pp.}, volume={22}, DOI={10.2307/2964059}, number={1}, journal={The Journal of Symbolic Logic}, publisher={Cambridge University Press}, author={Bernays, Paul}, year={1957}, pages={68–72}}

@article{orig_cong_clos,
author = {Nelson, Greg and Oppen, Derek C.},
title = {Fast Decision Procedures Based on Congruence Closure},
year = {1980},
issue_date = {April 1980},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {27},
number = {2},
issn = {0004-5411},
url = {https://doi.org/10.1145/322186.322198},
doi = {10.1145/322186.322198},
abstract = {The notion of the congruence closure of a relation on a graph is defined and several algorithms for computing it are surveyed. A simple proof is given that the congruence closure algorithm provides a decision procedure for the quantifier-free theory of equality. A decision procedure is then given for the quantifier-free theory of LISP list structure based on the congruence closure algorithm. Both decision procedures determine the satisfiability of a conjunction of literals of length n in average time O(n log n) using the fastest known congruence closure algorithm. It is also shown that if the axiomatization of the theory of list structure is changed slightly, the problem of determining the satisfiability of a conjunction of literals becomes NP-complete. The decision procedures have been implemented in the authors' simplifier for the Stanford Pascal Verifier.},
journal = {J. ACM},
month = {apr},
pages = {356–364},
numpages = {9}
}

@article{union_find,
author = {Galler, Bernard A. and Fisher, Michael J.},
title = {An Improved Equivalence Algorithm},
year = {1964},
issue_date = {May 1964},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {5},
issn = {0001-0782},
url = {https://doi.org/10.1145/364099.364331},
doi = {10.1145/364099.364331},
abstract = {An algorithm for assigning storage on the basis of EQUIVALENCE, DIMENSION and COMMON declarations is presented. The algorithm is based on a tree structure, and has reduced computation time by 40 percent over a previously published algorithm by identifying all equivalence classes with one scan of the EQUIVALENCE declarations. The method is applicable in any problem in which it is necessary to identify equivalence classes, given the element pairs defining the equivalence relation.},
journal = {Commun. ACM},
month = {may},
pages = {301–303},
numpages = {3}
}

@inproceedings{simplex_dpllt,
  title={Integrating Simplex with DPLL(T )},
  author={Bruno Dutertre and Leonardo Mendonça de Moura},
  year={2006}
}

@inproceedings{hammer_20,
  author    = {Jasmin Christian Blanchette},
  title     = {Redirecting Proofs by Contradiction},
  booktitle = {PxTP 2013. Third International Workshop on Proof Exchange for Theorem Proving},
  editor    = {Jasmin Christian Blanchette and Josef Urban},
  series    = {EPiC Series in Computing},
  volume    = {14},
  pages     = {11--26},
  year      = {2013},
  publisher = {EasyChair},
  bibsource = {EasyChair, https://easychair.org},
  issn      = {2398-7340},
  url       = {https://easychair.org/publications/paper/d6nT},
  doi       = {10.29007/wm8b}}

@article{hammer_21,
author = {Blanchette, Jasmin and Böhme, Sascha and Fleury, Mathias and Smolka, Steffen and Steckermeier, Albert},
year = {2015},
month = {07},
pages = {},
title = {Semi-intelligible Isar Proofs from Machine-Generated Proofs},
volume = {56},
journal = {Journal of Automated Reasoning},
doi = {10.1007/s10817-015-9335-3}
}

@article{cdcl_t,
author = {Nieuwenhuis, Robert and Oliveras, Albert and Tinelli, Cesare},
title = {Solving SAT and SAT Modulo Theories: From an Abstract Davis--Putnam--Logemann--Loveland Procedure to DPLL(T)},
year = {2006},
issue_date = {November 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {53},
number = {6},
issn = {0004-5411},
url = {https://doi.org/10.1145/1217856.1217859},
doi = {10.1145/1217856.1217859},
abstract = {We first introduce Abstract DPLL, a rule-based formulation of the Davis--Putnam--Logemann--Loveland (DPLL) procedure for propositional satisfiability. This abstract framework allows one to cleanly express practical DPLL algorithms and to formally reason about them in a simple way. Its properties, such as soundness, completeness or termination, immediately carry over to the modern DPLL implementations with features such as backjumping or clause learning.We then extend the framework to Satisfiability Modulo background Theories (SMT) and use it to model several variants of the so-called lazy approach for SMT. In particular, we use it to introduce a few variants of a new, efficient and modular approach for SMT based on a general DPLL(X) engine, whose parameter X can be instantiated with a specialized solver SolverT for a given theory T, thus producing a DPLL(T) system. We describe the high-level design of DPLL(X) and its cooperation with SolverT, discuss the role of theory propagation, and describe different DPLL(T) strategies for some theories arising in industrial applications.Our extensive experimental evidence, summarized in this article, shows that DPLL(T) systems can significantly outperform the other state-of-the-art tools, frequently even in orders of magnitude, and have better scaling properties.},
journal = {J. ACM},
month = {nov},
pages = {937–977},
numpages = {41},
keywords = {Satisfiability Modulo Theories, SAT solvers}
}

@article{res_tree_complete,
author = {Robinson, J. A.},
title = {A Machine-Oriented Logic Based on the Resolution Principle},
year = {1965},
issue_date = {Jan. 1965},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {1},
issn = {0004-5411},
url = {https://doi.org/10.1145/321250.321253},
doi = {10.1145/321250.321253},
journal = {J. ACM},
month = {jan},
pages = {23–41},
numpages = {19}
}

@book{farkas_ref,
  added-at = {2012-11-22T19:17:38.000+0100},
  author = {Schrijver, A.},
  biburl = {https://www.bibsonomy.org/bibtex/2c05d22504b2f52da8a72d854b5043004/wvdaalst},
  interhash = {339112f38d5ae6dba33e4d7266d15b28},
  intrahash = {c05d22504b2f52da8a72d854b5043004},
  keywords = {BPM collection imported},
  publisher = {Wiley-Interscience},
  timestamp = {2012-11-22T19:22:37.000+0100},
  title = {{Theory of Linear and Integer programming}},
  year = 1986
}

@incollection{ch_correspondence,
	author = {William Alvin Howard},
	publisher = {Academic Press},
	title = {The Formulae-as-Types Notion of Construction},
	editor = {Haskell Curry and Hindley B. and Seldin J. Roger and P. Jonathan},
	year = {1980},
	booktitle = {To H. B. Curry: Essays on Combinatory Logic, Lambda Calculus, and Formalism}
}

@incollection{cic_ref,
  TITLE = {{Introduction to the Calculus of Inductive Constructions}},
  AUTHOR = {Paulin-Mohring, Christine},
  URL = {https://inria.hal.science/hal-01094195},
  BOOKTITLE = {{All about Proofs, Proofs for All}},
  EDITOR = {Bruno Woltzenlogel Paleo and David Delahaye},
  PUBLISHER = {{College Publications}},
  SERIES = {Studies in Logic (Mathematical logic and foundations)},
  VOLUME = {55},
  YEAR = {2015},
  MONTH = Jan,
  KEYWORDS = {Calculus of Inductive Constructions ; Coq proof assistant},
  PDF = {https://inria.hal.science/hal-01094195/file/CIC.pdf},
  HAL_ID = {hal-01094195},
  HAL_VERSION = {v1},
}

@incollection{dep_type_theory,
title = {An Intuitionistic Theory of Types: Predicative Part},
editor = {H.E. Rose and J.C. Shepherdson},
series = {Studies in Logic and the Foundations of Mathematics},
publisher = {Elsevier},
volume = {80},
pages = {73-118},
year = {1975},
booktitle = {Logic Colloquium '73},
issn = {0049-237X},
doi = {https://doi.org/10.1016/S0049-237X(08)71945-1},
url = {https://www.sciencedirect.com/science/article/pii/S0049237X08719451},
author = {Per Martin-Löf},
abstract = {Publisher Summary
The theory of types is intended to be a full-scale system for formalizing intuitionistic mathematics as developed. The language of the theory is richer than the languages of traditional intuitionistic systems in permitting proofs to appear as parts of propositions so that the propositions of the theory can express properties of proofs. There are axioms for universes that link the generation of objects and types and play somewhat the same role for the present theory as does the replacement axiom for Zermelo–Fraenkel set theory. The present theory is based on a strongly impredicative axiom that there is a type of all types in symbols. This axiom has to be abandoned, however, after it has been shown to lead to a contraction. This chapter discusses Normalization theorem, which can be strengthened in two ways: it can be made to cover open terms and it can be proved that every reduction sequence starting from an arbitrary term leads to a unique normal term after a finite number of steps. The definition of the notion of convertibility and the proof that an arbitrary term is convertible can no longer be separated because the type symbols and the terms are generated simultaneously.}
}

@unpublished{lcIntro,
  added-at = {2019-03-01T00:11:50.000+0100},
  author = {Barendregt, Henk and Barendsen, Erik},
  biburl = {https://www.bibsonomy.org/bibtex/2119ca2319bb8a444e56a1334607dba08/gdmcbain},
  citeulike-article-id = {14439797},
  citeulike-attachment-1 = {barendregt_00_introduction.pdf; /pdf/user/gdmcbain/article/14439797/1119451/barendregt_00_introduction.pdf; 322cb8734965d5e7693248919f5d887e019f05b2},
  citeulike-linkout-0 = {http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf},
  edition = {Revised},
  file = {barendregt_00_introduction.pdf},
  interhash = {bcfe4afc85e52c84c9f76313797f4ff6},
  intrahash = {119ca2319bb8a444e56a1334607dba08},
  keywords = {03b40-combinatory-logic-and-lambda-calculus 03d10-turing-machines-and-related-notions 68n18-functional-programming-and-lambda-calculus},
  month = mar,
  posted-at = {2017-09-29 03:38:20},
  priority = {2},
  timestamp = {2019-03-01T00:11:50.000+0100},
  title = {{Introduction to Lambda Calculus}},
  url = {http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf},
  year = 2000
}

@article{debruijnIndices,
title = {Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem},
journal = {Indagationes Mathematicae (Proceedings)},
volume = {75},
number = {5},
pages = {381-392},
year = {1972},
issn = {1385-7258},
doi = {https://doi.org/10.1016/1385-7258(72)90034-0},
url = {https://www.sciencedirect.com/science/article/pii/1385725872900340},
author = {N.G {de Bruijn}},
abstract = {In ordinary lambda calculus the occurrences of a bound variable are made recognizable by the use of one and the same (otherwise irrelevant) name at all occurrences. This convention is known to cause considerable trouble in cases of substitution. In the present paper a different notational system is developed, where occurrences of variables are indicated by integers giving the “distance” to the binding λ instead of a name attached to that λ. The system is claimed to be efficient for automatic formula manipulation as well as for metalingual discussion. As an example the most essential part of a proof of the Church-Rosser theorem is presented in this namefree calculus.}
}

@article{haskell,
author = {Hudak, Paul and Peyton Jones, Simon and Wadler, Philip and Boutel, Brian and Fairbairn, Jon and Fasel, Joseph and Guzm\'{a}n, Mar\'{\i}a M. and Hammond, Kevin and Hughes, John and Johnsson, Thomas and Kieburtz, Dick and Nikhil, Rishiyur and Partain, Will and Peterson, John},
title = {Report on the Programming Language Haskell: A Non-Strict, Purely Functional Language Version 1.2},
year = {1992},
issue_date = {May 1992},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {27},
number = {5},
issn = {0362-1340},
url = {https://doi.org/10.1145/130697.130699},
doi = {10.1145/130697.130699},
abstract = {"Some half dozen persons have written technically on combinatory logic, and most of these, including ourselves, have published something erroneous. Since some of our fellow sinners are among the most careful and competent logicians on the contemporary scene, we regard this as evidence that the subject is refractory. Thus fullness of exposition is necessory for accurary; and excessive condensation would be false economy here, even more than it is ordinarily."},
journal = {SIGPLAN Not.},
month = {may},
pages = {1–164},
numpages = {164}
}

@inproceedings{imperativeFunctional,
author = {Peyton Jones, Simon L. and Wadler, Philip},
title = {Imperative Functional Programming},
year = {1993},
isbn = {0897915607},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/158511.158524},
doi = {10.1145/158511.158524},
abstract = {We present a new model, based on monads, for performing input/output in a non-strict, purely functional language. It is composable, extensible, efficient, requires no extensions to the type system, and extends smoothly to incorporate mixed-language working and in-place array updates.},
booktitle = {Proceedings of the 20th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {71–84},
numpages = {14},
location = {Charleston, South Carolina, USA},
series = {POPL '93}
}

@InCollection{intuitionistic,
	author       =	{van Atten, Mark},
	title        =	{{The Development of Intuitionistic Logic}},
	booktitle    =	{The {Stanford} Encyclopedia of Philosophy},
	editor       =	{Edward N. Zalta},
	howpublished =	{\url{https://plato.stanford.edu/archives/sum2022/entries/intuitionistic-logic-development/}},
	year         =	{2022},
	edition      =	{{S}ummer 2022},
	publisher    =	{Metaphysics Research Lab, Stanford University}
}

@inproceedings{ringLean,
author = {Baanen, Anne},
title = {A Lean Tactic for Normalising Ring Expressions with Exponents (Short Paper)},
year = {2020},
isbn = {978-3-030-51053-4},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-030-51054-1_2},
doi = {10.1007/978-3-030-51054-1_2},
abstract = {This paper describes the design of the normalising tactic ring_exp for the Lean prover. This tactic improves on existing tactics by extending commutative rings with a binary exponent operator. An inductive family of types represents the normal form, enforcing various invariants. The design can also be extended with more operators.},
booktitle = {Automated Reasoning: 10th International Joint Conference, IJCAR 2020, Paris, France, July 1–4, 2020, Proceedings, Part II},
pages = {21–27},
numpages = {7},
location = {Paris, France}
}

@proceedings{handbook,
  added-at = {2011-12-03T17:47:36.000+0100},
  biburl = {https://www.bibsonomy.org/bibtex/2d9fd232df370a1c69cbab8e955bc900f/henningb},
  booktitle = {Handbook of Satisfiability},
  description = {dblp},
  editor = {Biere, Armin and Heule, Marijn and van Maaren, Hans and Walsh, Toby},
  groups = {public},
  interhash = {bc1777bb3606368d9089d58ab84318c3},
  intrahash = {d9fd232df370a1c69cbab8e955bc900f},
  isbn = {978-1-58603-929-5},
  keywords = {smt},
  publisher = {IOS Press},
  series = {Frontiers in Artificial Intelligence and Applications},
  timestamp = {2012-02-24T16:46:23.000+0100},
  title = {Handbook of Satisfiability},
  url = {http://dblp.uni-trier.de/db/series/faia/faia185.html},
  username = {henningb},
  volume = 185,
  year = 2009
}

@article{fft,
  added-at = {2008-03-11T21:08:33.000+0100},
  author = {Cooley, James and Tukey, John},
  biburl = {https://www.bibsonomy.org/bibtex/2fff11135afc0f5d727d1b72fd8b3b199/voland},
  interhash = {2187c52cd053e20d97b4552b1de66d01},
  intrahash = {fff11135afc0f5d727d1b72fd8b3b199},
  journal = {Mathematics of Computation},
  keywords = {Fourier algorithm fft transform},
  number = 90,
  pages = {297-301},
  timestamp = {2008-03-11T21:08:33.000+0100},
  title = {An Algorithm for the Machine Calculation of Complex Fourier Series},
  volume = 19,
  year = 1965
}

@InProceedings{lean4_ref,
author="Moura, Leonardo de
and Ullrich, Sebastian",
editor="Platzer, Andr{\'e}
and Sutcliffe, Geoff",
title="The Lean 4 Theorem Prover and Programming Language",
booktitle="Automated Deduction -- CADE 28",
year="2021",
publisher="Springer International Publishing",
address="Cham",
pages="625--635",
abstract="Lean 4 is a reimplementation of the Lean interactive theorem prover (ITP) in Lean itself. It addresses many shortcomings of the previous versions and contains many new features. Lean 4 is fully extensible: users can modify and extend the parser, elaborator, tactics, decision procedures, pretty printer, and code generator. The new system has a hygienic macro system custom-built for ITPs. It contains a new typeclass resolution procedure based on tabled resolution, addressing significant performance problems reported by the growing user base. Lean 4 is also an efficient functional programming language based on a novel programming paradigm called functional but in-place. Efficient code generation is crucial for Lean users because many write custom proof automation procedures in Lean itself.",
isbn="978-3-030-79876-5"
}

@Inbook{reflProof,
author="Bertot, Yves
and Cast{\'e}ran, Pierre",
title="* Proof by Reflection",
bookTitle="Interactive Theorem Proving and Program Development: Coq'Art: The Calculus of Inductive Constructions",
year="2004",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="433--448",
abstract="Proof by reflection is a characteristic feature of proving in type theory. There is a programming language embedded inside the logical language and it can be used to describe decision procedures or systematic reasoning methods. We already know that programming in Coq is a costly task and this approach is only worth the effort because the proof process is made much more efficient. In some cases, dozens of rewrite operations can be replaced with a few theorem applications and a convertibility test of the Calculus of Inductive Constructions. Since the computations of this programming language do not appear in the proof terms, we obtain proofs that are smaller and often quicker to check.",
isbn="978-3-662-07964-5",
doi="10.1007/978-3-662-07964-5_16",
url="https://doi.org/10.1007/978-3-662-07964-5_16"
}

@Inbook{tseitin,
author="Tseitin, G. S.",
editor="Siekmann, J{\"o}rg H.
and Wrightson, Graham",
title="On the Complexity of Derivation in Propositional Calculus",
bookTitle="Automation of Reasoning: 2: Classical Papers on Computational Logic 1967--1970",
year="1983",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="466--483",
abstract="The question of the minimum complexity of derivation of a given formula in classical propositional calculus is considered in this article and it is proved that estimates of complexity may vary considerably among the various forms of propositional calculus. The forms of propositional calculus used in the present article are somewhat unusual, {\textdagger} but the results obtained for them can, in principle, be extended to the usual forms of propositional calculus.",
isbn="978-3-642-81955-1",
doi="10.1007/978-3-642-81955-1_28",
url="https://doi.org/10.1007/978-3-642-81955-1_28"
}

@inproceedings{alethe,
  author       = {Hans{-}J{\"{o}}rg Schurr and
                  Mathias Fleury and
                  Haniel Barbosa and
                  Pascal Fontaine},
  editor       = {Chantal Keller and
                  Mathias Fleury},
  title        = {Alethe: Towards a Generic {SMT} Proof Format (extended abstract)},
  booktitle    = {Proceedings Seventh Workshop on Proof eXchange for Theorem Proving,
                  PxTP 2021, Pittsburg, PA, USA, July 11, 2021},
  series       = {{EPTCS}},
  volume       = {336},
  pages        = {49--54},
  year         = {2021},
  url          = {https://doi.org/10.4204/EPTCS.336.6},
  doi          = {10.4204/EPTCS.336.6},
  timestamp    = {Thu, 25 Nov 2021 17:17:10 +0100},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2107-02354.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{quantElim,
  author       = {Mikol{\'{a}}s Janota and
                  Haniel Barbosa and
                  Pascal Fontaine and
                  Andrew Reynolds},
  title        = {Fair and Adventurous Enumeration of Quantifier Instantiations},
  journal      = {CoRR},
  volume       = {abs/2105.13700},
  year         = {2021},
  url          = {https://arxiv.org/abs/2105.13700},
  eprinttype    = {arXiv},
  eprint       = {2105.13700},
  timestamp    = {Tue, 27 Jul 2021 08:54:10 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2105-13700.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{carcara,
  author       = {Bruno Andreotti and
                  Hanna Lachnitt and
                  Haniel Barbosa},
  editor       = {Sriram Sankaranarayanan and
                  Natasha Sharygina},
  title        = {Carcara: An Efficient Proof Checker and Elaborator for {SMT} Proofs
                  in the Alethe Format},
  booktitle    = {Tools and Algorithms for the Construction and Analysis of Systems
                  - 29th International Conference, {TACAS} 2023, Held as Part of the
                  European Joint Conferences on Theory and Practice of Software, {ETAPS}
                  2022, Paris, France, April 22-27, 2023, Proceedings, Part {I}},
  series       = {Lecture Notes in Computer Science},
  volume       = {13993},
  pages        = {367--386},
  publisher    = {Springer},
  year         = {2023},
  url          = {https://doi.org/10.1007/978-3-031-30823-9\_19},
  doi          = {10.1007/978-3-031-30823-9\_19},
  timestamp    = {Wed, 17 May 2023 21:55:33 +0200},
  biburl       = {https://dblp.org/rec/conf/tacas/AndreottiLB23.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@misc{kepler,
      title={A formal proof of the Kepler conjecture},
      author={Thomas Hales and Mark Adams and Gertrud Bauer and Dat Tat Dang and John Harrison and Truong Le Hoang and Cezary Kaliszyk and Victor Magron and Sean McLaughlin and Thang Tat Nguyen and Truong Quang Nguyen and Tobias Nipkow and Steven Obua and Joseph Pleso and Jason Rute and Alexey Solovyev and An Hoai Thi Ta and Trung Nam Tran and Diep Thi Trieu and Josef Urban and Ky Khac Vu and Roland Zumkeller},
      year={2015},
      eprint={1501.02155},
      archivePrefix={arXiv},
      primaryClass={math.MG}
}

@inproceedings{fourColors,
  author       = {Georges Gonthier},
  editor       = {Deepak Kapur},
  title        = {The Four Colour Theorem: Engineering of a Formal Proof},
  booktitle    = {Computer Mathematics, 8th Asian Symposium, {ASCM} 2007, Singapore,
                  December 15-17, 2007. Revised and Invited Papers},
  series       = {Lecture Notes in Computer Science},
  volume       = {5081},
  pages        = {333},
  publisher    = {Springer},
  year         = {2007},
  url          = {https://doi.org/10.1007/978-3-540-87827-8\_28},
  doi          = {10.1007/978-3-540-87827-8\_28},
  timestamp    = {Tue, 14 May 2019 10:00:48 +0200},
  biburl       = {https://dblp.org/rec/conf/ascm/Gonthier07.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{judgement-day,
    author={Sascha B\"ohme and Tobias Nipkow},
    title={Sledgehammer: Judgement Day},
    booktitle={Automated Reasoning (IJCAR 2010)},
    editor={J. Giesl and R. H\"ahnle},publisher={Springer},
    series={LNCS},volume={6173},pages={107-121},year=2010
}

@InProceedings{reliable,
author="Schurr, Hans-J{\"o}rg
and Fleury, Mathias
and Desharnais, Martin",
editor="Platzer, Andr{\'e}
and Sutcliffe, Geoff",
title="Reliable Reconstruction of Fine-grained Proofs in a Proof Assistant",
booktitle="Automated Deduction -- CADE 28",
year="2021",
publisher="Springer International Publishing",
address="Cham",
pages="450--467",
abstract="We present a fast and reliable reconstruction of proofs generated by the SMT solver veriT in Isabelle. The fine-grained proof format makes the reconstruction simple and efficient. For typical proof steps, such as arithmetic reasoning and skolemization, our reconstruction can avoid expensive search. By skipping proof steps that are irrelevant for Isabelle, the performance of proof checking is improved. Our method increases the success rate of Sledgehammer by halving the failure rate and reduces the checking time by 13{\%}. We provide a detailed evaluation of the reconstruction time for each rule. The runtime is influenced by both simple rules that appear very often and common complex rules.",
isbn="978-3-030-79876-5"
}
